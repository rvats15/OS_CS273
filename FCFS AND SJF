#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int completion_time;
    int waiting_time;
    int turnaround_time;
};

void findFCFS(struct Process processes[], int n) {
    int current_time = 0;
    float total_turnaround_time = 0, total_waiting_time = 0;
    
    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time > current_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        current_time = processes[i].completion_time;

        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
    }

    printf("\nAverage Turnaround Time (FCFS) = %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time (FCFS) = %.2f\n", total_waiting_time / n);
}

void findSJF(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int min_burst_time, shortest_index;
    int visited[n];
    float total_turnaround_time = 0, total_waiting_time = 0;
    
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    while (completed < n) {
        min_burst_time = 9999;
        shortest_index = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && visited[i] == 0 && processes[i].burst_time < min_burst_time) {
                min_burst_time = processes[i].burst_time;
                shortest_index = i;
            }
        }

        if (shortest_index != -1) {
            visited[shortest_index] = 1;
            processes[shortest_index].completion_time = current_time + processes[shortest_index].burst_time;
            processes[shortest_index].turnaround_time = processes[shortest_index].completion_time - processes[shortest_index].arrival_time;
            processes[shortest_index].waiting_time = processes[shortest_index].turnaround_time - processes[shortest_index].burst_time;
            current_time = processes[shortest_index].completion_time;
            completed++;

            total_turnaround_time += processes[shortest_index].turnaround_time;
            total_waiting_time += processes[shortest_index].waiting_time;
        } else {
            current_time++;
        }
    }

    printf("\nAverage Turnaround Time (SJF) = %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time (SJF) = %.2f\n", total_waiting_time / n);
}

void printStatistics(struct Process processes[], int n) {
    printf("\nProcess ID | Arrival Time | Burst Time | Completion Time | Turnaround Time | Waiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d         | %d            | %d          | %d               | %d               | %d\n",
               processes[i].id, processes[i].arrival_time, processes[i].burst_time,
               processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
}

int main() {
    int n, choice;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];
    
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }

    printf("\nChoose the CPU Scheduling Algorithm:\n");
    printf("1. FCFS (First Come First Serve)\n");
    printf("2. SJF (Shortest Job First)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        findFCFS(processes, n);
        printf("\nFCFS Scheduling Algorithm:\n");
        printStatistics(processes, n);
    } else if (choice == 2) {
        findSJF(processes, n);
        printf("\nSJF Scheduling Algorithm:\n");
        printStatistics(processes, n);
    } else {
        printf("Invalid choice!\n");
    }

    return 0;
}

